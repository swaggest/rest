# This script is provided by github.com/bool64/dev.
name: test-unit
on:
  push:
    branches:
      - master
      - main
  pull_request:
env:
  GO111MODULE: "on"
  RUN_BASE_COVERAGE: "on"  # Runs test for PR base in case base test coverage is missing.
jobs:
  test:
    strategy:
      matrix:
        go-version: [ 1.13.x, 1.14.x, 1.15.x, 1.16.x, 1.17.x ]
    runs-on: ubuntu-latest
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Go cache
        uses: actions/cache@v2
        with:
          # In order:
          # * Module download cache
          # * Build cache (Linux)
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-cache-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-cache
      - name: Restore base test coverage
        if: matrix.go-version == '1.17.x'
        uses: actions/cache@v2
        with:
          path: |
            unit-base.txt
          # Use base sha for PR or new commit hash for master/main push in test result key.
          key: ${{ runner.os }}-unit-test-coverage-${{ (github.event.pull_request.base.sha != github.event.after) && github.event.pull_request.base.sha || github.event.after }}
      - name: Checkout base code
        if: matrix.go-version == '1.17.x' && env.RUN_BASE_COVERAGE == 'on' && steps.benchmark-base.outputs.cache-hit != 'true' && github.event.pull_request.base.sha != ''
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.base.sha }}
          path: __base
      - name: Run test for base code
        if: matrix.go-version == '1.17.x' && env.RUN_BASE_COVERAGE == 'on' && steps.benchmark-base.outputs.cache-hit != 'true' && github.event.pull_request.base.sha != ''
        run: |
          cd __base
          make | grep test-unit && (make test-unit && go tool cover -func=./unit.coverprofile | sed -e 's/.go:[0-9]*:\t/.go\t/g' | sed -e 's/\t\t*/\t/g'  > ../unit-base.txt) || echo "No test-unit in base"
      - name: Test
        id: test
        run: |
          make test-unit
          go tool cover -func=./unit.coverprofile | sed -e 's/.go:[0-9]*:\t/.go\t/g' | sed -e 's/\t\t*/\t/g'  > unit.txt
          OUTPUT=$(test -e unit-base.txt && (diff unit-base.txt unit.txt || exit 0) || cat unit.txt)
          OUTPUT="${OUTPUT//'%'/'%25'}"
          OUTPUT="${OUTPUT//$'\n'/'%0A'}"
          OUTPUT="${OUTPUT//$'\r'/'%0D'}"
          TOTAL=$(grep 'total:' unit.txt)
          echo "::set-output name=diff::$OUTPUT"
          echo "::set-output name=total::$TOTAL"
      - name: Store base coverage
        if: ${{ github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' }}
        run: cp unit.txt unit-base.txt
      - name: Comment Test Coverage
        if: matrix.go-version == '1.17.x'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          header: unit-test
          message: |
            ### Unit Test Coverage
            ${{ steps.test.outputs.total }}
            <details><summary>Coverage diff with base branch</summary>

            ```diff
            ${{ steps.test.outputs.diff }}
            ```
            </details>

      - name: Upload code coverage
        if: matrix.go-version == '1.17.x'
        uses: codecov/codecov-action@v1
        with:
          file: ./unit.coverprofile
          flags: unittests
