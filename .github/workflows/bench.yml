# This script is provided by github.com/bool64/dev.
name: bench
on:
  pull_request:
  workflow_dispatch:
    inputs:
      old:
        description: 'Old Ref'
        required: false
        default: 'master'
      new:
        description: 'New Ref'
        required: true

env:
  GO111MODULE: "on"
  CACHE_BENCHMARK: "off"    # Enables benchmark result reuse between runs, may skew latency results.
  RUN_BASE_BENCHMARK: "on"  # Runs benchmark for PR base in case benchmark result is missing.
jobs:
  bench:
    strategy:
      matrix:
        go-version: [ 1.17.x ]
    runs-on: ubuntu-latest
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ (github.event.inputs.new != '') && github.event.inputs.new || github.event.ref }}
      - name: Go cache
        uses: actions/cache@v2
        with:
          # In order:
          # * Module download cache
          # * Build cache (Linux)
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-cache-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-cache
      - name: Restore benchstat
        uses: actions/cache@v2
        with:
          path: ~/go/bin/benchstat
          key: ${{ runner.os }}-benchstat
      - name: Restore base benchmark result
        if: env.CACHE_BENCHMARK == 'on'
        id: benchmark-base
        uses: actions/cache@v2
        with:
          path: |
            bench-master.txt
            bench-main.txt
          # Use base sha for PR or new commit hash for master/main push in benchmark result key.
          key: ${{ runner.os }}-bench-${{ (github.event.pull_request.base.sha != github.event.after) && github.event.pull_request.base.sha || github.event.after }}
      - name: Checkout base code
        if: env.RUN_BASE_BENCHMARK == 'on' && steps.benchmark-base.outputs.cache-hit != 'true' && (github.event.pull_request.base.sha != '' || github.event.inputs.old != '')
        uses: actions/checkout@v2
        with:
          ref: ${{ (github.event.pull_request.base.sha != '' ) && github.event.pull_request.base.sha || github.event.inputs.old }}
          path: __base
      - name: Run base benchmark
        if: env.RUN_BASE_BENCHMARK == 'on' && steps.benchmark-base.outputs.cache-hit != 'true' && (github.event.pull_request.base.sha != '' || github.event.inputs.old != '')
        run: |
          export REF_NAME=master
          cd __base
          make | grep bench-run && (BENCH_COUNT=5 make bench-run bench-stat && cp bench-master.txt ../bench-master.txt) || echo "No benchmarks in base"
      - name: Benchmark
        id: bench
        run: |
          export REF_NAME=new
          BENCH_COUNT=5 make bench
          OUTPUT=$(make bench-stat-diff)
          OUTPUT="${OUTPUT//'%'/'%25'}"
          OUTPUT="${OUTPUT//$'\n'/'%0A'}"
          OUTPUT="${OUTPUT//$'\r'/'%0D'}"
          echo "::set-output name=diff::$OUTPUT"
          OUTPUT=$(make bench-stat)
          OUTPUT="${OUTPUT//'%'/'%25'}"
          OUTPUT="${OUTPUT//$'\n'/'%0A'}"
          OUTPUT="${OUTPUT//$'\r'/'%0D'}"
          echo "::set-output name=result::$OUTPUT"
      - name: Comment Benchmark Result
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          header: bench
          message: |
            ### Benchmark Result
            <details><summary>Benchmark diff with base branch</summary>

            ```
            ${{ steps.bench.outputs.diff }}
            ```
            </details>

            <details><summary>Benchmark result</summary>

            ```
            ${{ steps.bench.outputs.result }}
            ```
            </details>
